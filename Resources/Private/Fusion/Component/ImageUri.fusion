prototype(Carbon.Image:ImageUri) < prototype(Neos.Fusion:Component) {
    asset = null

    // If this is an array, multiple sources will be rendered
    multiplicator = 1

    async = ${Configuration.setting('Carbon.Image.async')}
    maximumWidth = ${Configuration.setting('Carbon.Image.maximumWidth')}
    maximumHeight = ${Configuration.setting('Carbon.Image.maximumHeight')}
    width = ${Configuration.setting('Carbon.Image.width')}
    height = ${Configuration.setting('Carbon.Image.height')}
    fixedSize = false
    allowCropping = ${this.fixedSize || Configuration.setting('Carbon.Image.allowCropping')}
    allowUpScaling = ${this.fixedSize || Configuration.setting('Carbon.Image.allowUpScaling')}
    preset = null

    // # gets replaced with the image
    // % gets replaced with the multiplicator
    resolutionPattern = '# %x'

    renderer = Neos.Fusion:Map {
        @if {
            hasAsset = ${props.asset}
            hasPresetIfNeeded = ${props.preset ? Configuration.setting('Neos.Media.thumbnailPresets')[props.preset] ? true : false : true}
        }
        @process {
            removeEmpty = ${Carbon.Array.filter(value)}
            join = ${Array.join(value, ',')}
        }
        items = ${Type.isArray(props.multiplicator) ? props.multiplicator : [props.multiplicator]}
        itemName = 'multiplicator'
        itemRenderer = Neos.Fusion:Component {
            @if.hasEnoughPixel = ${props.asset.width ? props.asset.width > ((this.values.width ? this.values.width : this.values.maximumWidth) * (multiplicator - 1)) : true}
            values = afx`
                <Carbon.Image:Internal.GetValues {...props} multiplicator={multiplicator} />
            `
            asset = ${props.asset}

            @process.multiplicator = Neos.Fusion:Loop {
                @if.render = ${Type.isArray(props.multiplicator)}
                items = ${Array.first(String.pregMatchAll(props.resolutionPattern, '/./'))}
                itemRenderer = ${item == '#' ? value : item == '%' ? multiplicator : item}
            }

            renderer = afx`
                <Neos.Neos:ImageUri @key='uri' asset={props.asset} {...props.values} />
            `
        }
    }
}

