prototype(Carbon.Image:Tag) < prototype(Neos.Fusion:Component) {
    asset = null
    assetLightbox = ${this.asset}

    renderInBackend = ${node.context.inBackend}

    srcset = ${Configuration.setting('Carbon.Image.srcset')}

    async = ${Configuration.setting('Carbon.Image.async')}
    maximumWidth = ${Configuration.setting('Carbon.Image.maximumWidth')}
    maximumHeight = ${Configuration.setting('Carbon.Image.maximumHeight')}
    width = null
    height = null
    fixedSize = false
    allowCropping = ${this.fixedSize || Configuration.setting('Carbon.Image.allowCropping')}
    allowUpScaling = ${this.fixedSize || Configuration.setting('Carbon.Image.allowUpScaling')}
    preset = null
    outputDimensions = ${Configuration.setting('Carbon.Image.outputDimensions')}
    loading = null

    alternativeText = null
    title = null
    id = null
    caption = null
    lightbox = null
    link = null

    style = null
    class = null
    classLink = ${this.class}
    classLightbox = ${this.class}

    configLightbox = ${Configuration.setting('Carbon.Image.lightbox')}

    dummy = Neos.Fusion:DataStructure {
        image = 'resource://Carbon.Image/Public/dummy-image.svg'
        ratio = null
        color = null
        style = Neos.Fusion:DataStructure
        default = ${Configuration.setting('Carbon.Image.dummy.image')}
    }

    renderer = Neos.Fusion:Component {
        @if.hasImageOrBackend = ${props.renderInBackend || props.asset}
        @apply.props = ${props}
        dimensions = afx`
            <Carbon.Image:Internal.GetDimensions @if.render={props.outputDimensions} {...props} />
        `
        hasLink = Carbon.Link:Valid {
            link = ${props.link}
        }

        renderer = Neos.Fusion:Tag {
            @process {
                link = afx`
                    <Carbon.Image:Link @if.render={props.hasLink} {...props} class={props.classLink} />
                `
                lightbox = afx`
                    <Carbon.Image:Lightbox @if.render={!props.hasLink && props.lightbox} asset={props.assetLightbox} caption={props.caption} class={props.classLightbox} config={props.configLightbox} />
                `
            }

            tagName = 'img'
            attributes {
                src = afx`
                    <Carbon.Image:Attributes.Src {...props} />
                `
                srcset = afx`
                    <Carbon.Image:Attributes.Srcset {...props} />
                `
                id = ${props.id}
                alt = ${props.alternativeText}
                title = ${props.title}
                loading = ${props.loading}
                width = ${props.dimensions ? props.dimensions.width : false}
                height = ${props.dimensions ? props.dimensions.height : false}
                class = Neos.Fusion:DataStructure {
                    class = ${Type.isArray(props.class) ? Array.join(props.class, ' ') : props.class}
                    addBackendHandle = ${props.asset ? false : 'neos-handle'}
                    @process {
                        filter = ${Carbon.Array.filter(value)}
                        removeEmpty = ${value ? value : false}
                    }
                }
                style = afx`
                    <Carbon.Image:Dummy @if.render={!props.asset} {...props} {...props.dummy} />
                    {props.style}
                `
                style.@process.removeEmpty = ${value ? value : false}
            }
        }
    }
}
