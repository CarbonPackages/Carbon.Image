prototype(Carbon.Image:Component.Presentation.Case) < prototype(Neos.Fusion:Component) {
    @propTypes {
        type = ${PropTypes.string}
    }

    @styleguide {
        title = 'Case (Image or Picture) Presentation Component'
        props {
            imageSource = Carbon.Image:Helper.ImageSource {
                outputDummy = true
            }
            type = 'image'
            width = 500
            lazy = false
            title = ''
            alternativeText = ''
            content = ''
            loading = 'eager'
        }
        propSets {
            options {
                variantPreset = ''
                thumbnailPreset = ''
                srcset = ''
                sizes = ''
                id = ''
                class = ''
                style = ''
            }
        }
    }

    minMaxImageSize = Neos.Fusion:DataStructure {
        min = ${Configuration.setting('Carbon.Image.minMaxImageSize.min')}
        max = ${Configuration.setting('Carbon.Image.minMaxImageSize.max')}
        step = ${Configuration.setting('Carbon.Image.minMaxImageSize.step')}
        multiplicator = ${Configuration.setting('Carbon.Image.minMaxImageSize.multiplicator')}
    }

    type = ${null}
    type.@process.convertToLowerCase = ${Type.isString(value) ? String.toLowerCase(value) : value}

    renderer = afx`
        <Carbon.Image:Component.Presentation.Image @key='image' @if={props.type == 'image'} {...props} type={null} />
        <Carbon.Image:Component.Presentation.Picture @key='picture' @if={props.type == 'picture'} {...props} type={null} />
        <Carbon.Notification:Backend
            @key='notification'
            @if={props.type != 'image' && props.type != 'picture'}
            type='alert'
            content={Translation.translate('case.noType', 'The property <code>type</code> must be <code>image</code> or <code>picture</code>.', [], 'Main', 'Carbon.Image')}
        />
    `
}
