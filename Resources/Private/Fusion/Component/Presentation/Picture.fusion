prototype(Carbon.Image:Component.Presentation.Picture) < prototype(Neos.Fusion:Component) {
    @propTypes {
        lazy = ${PropTypes.boolean}
        lazyClass = ${PropTypes.string}
        lazyWidth = ${PropTypes.integer}
        objectFit = ${PropTypes.oneOf(['cover', 'contain'])}
        loading = ${PropTypes.oneOf(['auto', 'lazy', 'eager'])}
        thumbnailPreset = ${PropTypes.string}
        variantPreset = ${PropTypes.arrayOf(PropTypes.string)}
        width = ${PropTypes.integer}
        height = ${PropTypes.integer}
        additionalFormats = ${PropTypes.arrayOf(PropTypes.string)}
    }
    @styleguide {
        props {
            imageSource = Carbon.Image:Helper.ImageSource {
                outputDummy = true
            }
            width = 500
            lazy = false
            title = ''
            alternativeText = ''
            content = ''
            loading = 'eager'
        }
        propSets {
            options {
                variantPreset = ''
                thumbnailPreset = ''
                srcset = ''
                sizes = ''
                id = ''
                class = ''
                style = ''
            }
        }
    }

    lazy = ${Configuration.Setting('Carbon.Image.lazy.enabled')}
    lazy.@process.disableInBackend = ${node.context.inBackend ? false : value}
    lazyClass = ${Configuration.Setting('Carbon.Image.lazy.class')}
    lazyWidth = ${Configuration.Setting('Carbon.Image.lazy.lazyWidth')}

    imageSource = ${null}
    thumbnailPreset = ${null}
    variantPreset = ${null}
    variantPreset.@process.split = ${value && Type.isString(value) ? String.split(value, '::') : (value || null)}
    width = ${null}
    height = ${null}

    additionalFormats = ${['webp']}

    srcset = ${null}
    sizes = ${null}
    sources = ${null}
    alternativeText = ${null}
    title = ${null}
    objectFit = ${null}
    id = ${null}
    class = ${null}
    style = ${null}
    loading = ${null}

    figureTagName = 'figure'
    figureAttributes = Neos.Fusion:Attributes
    // If set and figureTagName is 'figure', a figcaption is rendered
    content = ${null}

    pictureAttributes = Neos.Fusion:DataStructure

    // Internal
    width.@process {
        thumbnailPreset = ${this.thumbnailPreset ? Configuration.setting('Neos.Media.thumbnailPresets.' + this.thumbnailPreset + '.width') : (String.toInteger(value) || null)}
    }
    height.@process {
        thumbnailPreset = ${this.thumbnailPreset ? Configuration.setting('Neos.Media.thumbnailPresets.' + this.thumbnailPreset + '.height') : (String.toInteger(value) || null)}
    }
    _isAssetImageSource = ${Type.instance(this.imageSource, 'Sitegeist\Kaleidoscope\Domain\AssetImageSource')}
    _isScalableImageSource = ${this._isAssetImageSource || Type.instance(this.imageSource, 'Sitegeist\Kaleidoscope\Domain\DummyImageSource')}

    _sizedImageSource = ${this.imageSource}
    _sizedImageSource.@process {
        width = ${this._isScalableImageSource && this.width ? value.withWidth(this.width) : value}
        height = ${this._isScalableImageSource && this.height ? value.withHeight(this.height) : value}
        variantPreset = ${this._isScalableImageSource && this.variantPreset ? value.withVariantPreset(this.variantPreset[0], this.variantPreset[1]) : value}
    }

    _imageClass = ${BEM.modifier('carbon-image', [this.objectFit, 'picture'])}
    _calculatedSrcSet = ${this.srcset ? null : (this.width || this.height)}
    _calculatedSrcSet.@process.calc = Carbon.Image:Helper.MinMaxImageSize
    _finalSrcSet = ${this.srcset || this._calculatedSrcSet}

    @if.hasImageSource = ${this.imageSource}

    renderer = afx`
        <Carbon.Eel:Tag tagName={props.figureTagName} attributes={props.figureAttributes}>
            <Carbon.Eel:Tag @key='wrapper' tagName={props.linkAttributes ? 'a' : null} attributes={props.linkAttributes}>
                <picture {...props.pictureAttributes}>
                    <Neos.Fusion:Loop @key='additionalFormats' items={props.additionalFormats} @if.set={props.additionalFormats && props._isAssetImageSource} itemName='format'>
                        <Carbon.Image:Component.Fragment.Source
                            @key='noSources'
                            @if.set={!props.sources}
                            lazy={props.lazy}
                            imageSource={props._sizedImageSource.withFormat(format)}
                            type={'image/' + format}
                            srcset={props._finalSrcSet}
                            sizes={props.sizes}
                            width={props.width}
                            height={props.height}
                        />
                        <Neos.Fusion:Loop @key='sources' items={props.sources} itemName='source' @if.set={props.sources}>
                            <Carbon.Image:Component.Fragment.Source
                                lazy={props.lazy}
                                imageSource={source.imageSource ? source.imageSource.withFormat(format) : props._sizedImageSource.withFormat(format)}
                                type={'image/' + format}
                                media={source.media || props.media}
                                srcset={source.srcset || props._finalSrcSet}
                                sizes={source.sizes || props.sizes}
                                width={source.width || props.width}
                                height={source.height || props.height}
                            />
                        </Neos.Fusion:Loop>
                    </Neos.Fusion:Loop>
                    <Neos.Fusion:Loop @key='sources' items={props.sources} itemName='source' @if.set={props.sources}>
                        <Carbon.Image:Component.Fragment.Source
                            lazy={props.lazy}
                            imageSource={source.imageSource || props._sizedImageSource}
                            type={source.type}
                            media={source.media}
                            srcset={source.srcset || props._finalSrcSet}
                            sizes={source.sizes || props.sizes}
                            width={source.width || props.width}
                            height={source.height || props.height}
                        />
                    </Neos.Fusion:Loop>
                    <Carbon.Image:Component.Fragment.Image
                        @key='image'
                        lazy={props.lazy}
                        lazyWidth={props.lazyWidth}
                        id={props.id}
                        class={Carbon.String.merge(props.class, props._imageClass, props.lazy ? props.lazyClass : null)}
                        style={props.style}
                        title={props.title}
                        loading={props.loading}
                        alt={props.alternativeText}
                        imageSource={props._sizedImageSource}
                        sizes={props.sizes}
                        srcset={props._isScalableImageSource ? props._finalSrcSet : null}
                        objectFit={props.objectFit}
                    />
                </picture>
            </Carbon.Eel:Tag>
            <Carbon.Image:Component.Fragment.Figcaption @key='figcaption' {...props} />
        </Carbon.Eel:Tag>
    `
}
