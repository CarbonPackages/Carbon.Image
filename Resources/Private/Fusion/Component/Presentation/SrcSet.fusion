prototype(Carbon.Image:Component.Presentation.SrcSet) < prototype(Neos.Fusion:Component) {
    @propTypes {
        thumbnailPreset = ${PropTypes.string}
        variantPreset = ${PropTypes.arrayOf(PropTypes.string)}
        width = ${PropTypes.integer}
        height = ${PropTypes.integer}
    }

    imageSource = ${null}
    thumbnailPreset = ${null}
    variantPreset = ${null}
    variantPreset.@process.split = ${value && Type.isString(value) ? String.split(value, '::') : (value || null)}
    width = ${null}
    height = ${null}
    srcset = ${null}
    format = ${null}

    // Internal
    width.@process {
        thumbnailPreset = ${this.thumbnailPreset ? Configuration.setting('Neos.Media.thumbnailPresets.' + this.thumbnailPreset + '.width') : (String.toInteger(value) || null)}
    }
    height.@process {
        thumbnailPreset = ${this.thumbnailPreset ? Configuration.setting('Neos.Media.thumbnailPresets.' + this.thumbnailPreset + '.height') : (String.toInteger(value) || null)}
    }
    _isAssetImageSource = ${Type.instance(this.imageSource, 'Sitegeist\Kaleidoscope\Domain\AssetImageSource')}
    _isScalableImageSource = ${this._isAssetImageSource || Type.instance(this.imageSource, 'Sitegeist\Kaleidoscope\Domain\DummyImageSource')}

    _sizedImageSource = ${this.imageSource}
    _sizedImageSource.@process {
        width = ${this._isScalableImageSource && this.width ? value.withWidth(this.width) : value}
        height = ${this._isScalableImageSource && this.height ? value.withHeight(this.height) : value}
        variantPreset = ${this._isScalableImageSource && this.variantPreset ? value.withVariantPreset(this.variantPreset[0], this.variantPreset[1]) : value}
        format = ${this._isScalableImageSource && this.format ? value.withFormat(this.format) : value}
    }
    _calculatedSrcSet = ${this.srcset ? null : (this.width || this.height)}
    _calculatedSrcSet.@process.calc = Carbon.Image:Helper.MinMaxImageSize
    _finalSrcSet = ${this.srcset || this._calculatedSrcSet}

    @if.hasImageSourceAndSrcSet = ${this._sizedImageSource && this._finalSrcSet}

    renderer = ${props._sizedImageSource.srcset(props._finalSrcSet)}
}
