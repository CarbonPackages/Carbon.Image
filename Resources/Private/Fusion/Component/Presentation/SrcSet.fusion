prototype(Carbon.Image:Component.Presentation.SrcSet) < prototype(Neos.Fusion:Component) {
    @propTypes {
        thumbnailPreset = ${PropTypes.string}
        variantPreset = ${PropTypes.arrayOf(PropTypes.string)}
        width = ${PropTypes.integer}
        height = ${PropTypes.integer}
    }

    imageSource = null
    thumbnailPreset = null
    variantPreset = null
    variantPreset.@process.split = ${value && Type.isString(value) ? String.split(value, '::') : (value || null)}
    width = null
    height = null
    srcset = null

    // Internal
    width.@process {
        thumbnailPreset = ${this.thumbnailPreset ? Configuration.setting('Neos.Media.thumbnailPresets.' + this.thumbnailPreset + '.width') : (String.toInteger(value) || null)}
    }
    height.@process {
        thumbnailPreset = ${this.thumbnailPreset ? Configuration.setting('Neos.Media.thumbnailPresets.' + this.thumbnailPreset + '.height') : (String.toInteger(value) || null)}
    }
    isAssetImageSource = ${Type.instance(this.imageSource, 'Sitegeist\Kaleidoscope\Domain\AssetImageSource')}
    isScalableImageSource = ${this.isAssetImageSource || Type.instance(this.imageSource, 'Sitegeist\Kaleidoscope\Domain\DummyImageSource')}
    
    sizedImageSource = ${this.imageSource}
    sizedImageSource.@process {
        width = ${this.isScalableImageSource && this.width ? value.withWidth(this.width) : value}
        height = ${this.isScalableImageSource && this.height ? value.withHeight(this.height) : value}
        variantPreset = ${this.isScalableImageSource && this.variantPreset ? value.withVariantPreset(this.variantPreset[0], this.variantPreset[1]) : value}
    }
    calculatedSrcSet = ${this.srcset ? null : (this.width || this.height)}
    calculatedSrcSet.@process.calc = Carbon.Image:Helper.MinMaxImageSize
    finalSrcSet = ${this.srcset || this.calculatedSrcSet}

    @if.hasImageSourceAndSrcSet = ${this.imageSource && this.finalSrcSet}

    renderer = ${props.imageSource.srcset(props.finalSrcSet)}
}
