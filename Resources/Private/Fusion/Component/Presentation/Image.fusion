prototype(Carbon.Image:Component.Presentation.Image) < prototype(Neos.Fusion:Component) {
    @propTypes {
        lazy = ${PropTypes.boolean}
        lazyClass = ${PropTypes.string}
        lazyWidth = ${PropTypes.integer}
        objectFit = ${PropTypes.oneOf(['cover', 'contain'])}
        thumbnailPreset = ${PropTypes.string}
        variantPreset = ${PropTypes.arrayOf(PropTypes.string)}
        width = ${PropTypes.integer}
        height = ${PropTypes.integer}
    }
    @styleguide {
        props {
            imageSource = Carbon.Image:Helper.ImageSource {
                outputDummy = true
            }
            width = 500
            height = 200
            variantPreset = ''
            thumbnailPreset = ''
            lazy = false
            style = ''
            class = ''
        }
    }


    lazy = ${Configuration.Setting('Carbon.Image.lazy.enabled')}
    lazy.@process.disableInBackend = ${node.context.inBackend ? false : value}
    lazyClass = ${Configuration.Setting('Carbon.Image.lazy.class')}
    lazyWidth = ${Configuration.Setting('Carbon.Image.lazy.lazyWidth')}

    imageSource = null
    thumbnailPreset = null
    variantPreset = null
    variantPreset.@process.split = ${value && Type.isString(value) ? String.split(value, '::') : (value || null)}
    width = null
    height = null

    srcset = null
    sizes = null
    sources = null
    alternativeText = null
    title = null
    objectFit = null
    id = null
    class = null
    style = null

    figureTagName = 'figure'
    figureAttributes = null
    // If set and figureTagName is 'figure', a figcaption is rendered
    content = null

    // Internal
    width.@process {
        thumbnailPreset = ${this.thumbnailPreset ? Configuration.setting('Neos.Media.thumbnailPresets.' + this.thumbnailPreset + '.width') : (String.toInteger(value) || null)}
    }
    height.@process {
        thumbnailPreset = ${this.thumbnailPreset ? Configuration.setting('Neos.Media.thumbnailPresets.' + this.thumbnailPreset + '.height') : (String.toInteger(value) || null)}
    }
    isScalableImageSource = ${Type.instance(this.imageSource, 'Sitegeist\Kaleidoscope\EelHelpers\AssetImageSourceHelper') || Type.instance(this.imageSource, 'Sitegeist\Kaleidoscope\EelHelpers\DummyImageSourceHelper')}

    sizedImageSource = ${this.imageSource}
    sizedImageSource.@process {
        setWidth = ${this.isScalableImageSource && this.width ? value.setWidth(this.width) : value}
        setHeight = ${this.isScalableImageSource && this.height ? value.setHeight(this.height) : value}
        variantPreset = ${this.isScalableImageSource && this.variantPreset ? value.useVariantPreset(this.variantPreset[0], this.variantPreset[1]) : value}
    }

    imageClass = ${BEM.modifier('carbon-image', [this.objectFit, 'image'])}
    calculatedSrcSet = ${this.srcset ? null : (this.width || this.height)}
    calculatedSrcSet.@process.calc = Carbon.Image:Helper.MinMaxImageSize
    finalSrcSet = ${this.srcset || this.calculatedSrcSet}
    class.@process.convertToString = ${Type.isArray(value) ? Array.join(Carbon.Array.filter(value), ' ') : value}

    @if.hasImageSource = ${this.imageSource}


    renderer = Carbon.Eel:Tag {
        tagName = ${props.figureTagName}
        attributes = ${props.figureAttributes}
        content = afx`
            <Carbon.Eel:Tag @key='wrapper' tagName={props.linkAttributes ? 'a' : null} attributes={props.linkAttributes}>
                <img
                    id={props.id}
                    class={[props.class, props.imageClass, props.lazy ? props.lazyClass : null]}
                    style={props.style}
                    alt={props.alt}
                    title={props.title}
                    sizes={props.sizes}
                    sizes.@process.join={Type.isArray(value) ? Array.join(value, ', ') : value}
                    width={props.sizedImageSource.currentWidth}
                    height={props.sizedImageSource.currentHeight}
                    src={props.lazy ? (props.lazyWidth ? props.sizedImageSource.setWidth(props.lazyWidth, true) : null) : props.sizedImageSource}
                    srcset={!props.lazy && props.finalSrcSet ? props.sizedImageSource.srcset(props.finalSrcSet) : null}
                    data-src={props.lazy ? props.sizedImageSource : null}
                    data-srcset={props.lazy && props.finalSrcSet ? props.sizedImageSource.srcset(props.finalSrcSet) : null}
                    data-sizes={props.lazy && !props.sizes ? 'auto' : null}
                    data-parent-fit={props.lazy && props.objectFit}
                />
            </Carbon.Eel:Tag>
            <figcaption @key='figcaption' @if.set={props.content && props.figureTagName == 'figure'}>
                {props.content}
            </figcaption>
        `
    }
}
