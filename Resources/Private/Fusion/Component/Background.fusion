prototype(Carbon.Image:Background) < prototype(Neos.Fusion:Component) {
    asset = null
    assetLightbox = ${this.asset}

    renderInBackend = ${node.context.inBackend}

    srcset = ${Configuration.setting('Carbon.Image.srcset')}

    tagName = 'div'

    async = ${Configuration.setting('Carbon.Image.async')}
    maximumWidth = ${Configuration.setting('Carbon.Image.maximumWidth')}
    maximumHeight = ${Configuration.setting('Carbon.Image.maximumHeight')}
    width = null
    height = null
    ratio = ${this.width && this.height ? this.width / this.height : null}
    fixedSize = false
    allowCropping = ${this.fixedSize || Configuration.setting('Carbon.Image.allowCropping')}
    allowUpScaling = ${this.fixedSize || Configuration.setting('Carbon.Image.allowUpScaling')}
    preset = null


    title = false
    id = false
    caption = false
    lightbox = false
    link = false

    style = null
    class = null
    content = null
    classLink = ${this.class}
    classLightbox = ${this.class}

    configLightbox = ${Configuration.setting('Carbon.Image.lightbox')}

    dummy = Neos.Fusion:DataStructure {
        image = 'resource://Carbon.Image/Public/dummy-image.svg'
        ratio = null
        color = null
        style = Neos.Fusion:DataStructure
        default = ${Configuration.setting('Carbon.Image.dummy.background')}
    }

    renderer = Neos.Fusion:Component {
        @if.hasImageOrBackend = ${props.renderInBackend || props.asset ? true : false}
        @apply.props = ${props}

        hasValidLink = Carbon.Link:Valid {
            link = ${props.link}
        }
        spacer = Carbon.Image:Internal.Spacer {
            ratio = ${props.ratio}
        }

        style = afx`
            <Carbon.Image:Attributes.Src @if.render={props.asset} {...props} @process.addCSS={'background-image:url(' + value + ');'} />
            <Carbon.Image:Attributes.Srcset @if.render={props.asset} {...props} resolutionPattern='url(#) %x' @process.addCSS={'background-image:-webkit-image-set(' + value + ');'} />
            <Carbon.Image:Dummy @if.render={!props.asset} writePadding={false} {...props} {...props.dummy} />
        `

        renderer = Neos.Fusion:Tag {
            tagName = ${node.context.live && (props.hasValidLink || props.lightbox) ? 'a' : props.tagName}
            content = ${props.content || props.spacer}
            attributes = Neos.Fusion:Case {
                hasLink {
                    condition = ${props.hasValidLink}
                    renderer = Carbon.Link:Attributes {
                        link = ${props.link}
                        additionalClass = ${props.classLink}
                        style = ${props.style}
                        title = ${props.title}
                        id = ${props.id}
                    }
                }
                hasLightbox {
                    condition = ${props.lightbox && node.context.live}
                    renderer = Carbon.Image:Attributes.Lightbox {
                        asset = ${props.assetLightbox}
                        caption = ${props.caption}
                        class = ${props.classLightbox} 
                        config = ${props.configLightbox}
                        style = ${props.style}
                        title = ${props.title}
                        id = ${props.id}
                    }
                }
                default {
                    condition = true
                    renderer = Neos.Fusion:Attributes {
                        class = ${props.class}
                        style = ${props.style}
                        title = ${props.title}
                        id = ${props.id}
                    }
                }
            }
        }
    }
}
