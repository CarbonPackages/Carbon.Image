prototype(Carbon.Image:Internal.GetValues) < prototype(Neos.Fusion:Component) {
    // If a preset is given, we need to read it, because otherwise we will not 
    // able to  calculate if there are enough pixel to render a "retina" image
    // It also make sure, that if someone forgot to create the second preset 
    // (with suffix ".2x"), that it still render the second picture

    async = null
    maximumWidth = null
    maximumHeight = null
    width = null
    height = null
    allowCropping = null
    allowUpScaling = null
    preset = null
    
    multiplicator = 1

    renderer = Neos.Fusion:Case {
        hasPreset {
            condition = ${props.preset}
            renderer = Neos.Fusion:DataStructure {
                @context.preset = ${Configuration.setting('Neos.Media.thumbnailPresets')[props.preset]}
                maximumWidth = ${preset.maximumWidth ? preset.maximumWidth * props.multiplicator : null}
                maximumHeight = ${preset.maximumHeight ? preset.maximumHeight * props.multiplicator : null}
                width = ${preset.width ? preset.width * props.multiplicator : null}
                height = ${preset.height ? preset.height * props.multiplicator : null}
                allowCropping = ${preset.allowCropping}
                allowUpScaling = ${preset.allowUpScaling}
                async = ${preset.async}
            }
        }
        default {
            condition = true
            renderer = Neos.Fusion:DataStructure {
                maximumWidth = ${props.maximumWidth ? props.maximumWidth * props.multiplicator : null}
                maximumHeight = ${props.maximumHeight ? props.maximumHeight * props.multiplicator : null}
                width = ${props.width ? props.width * props.multiplicator : null}
                height = ${props.height ? props.height * props.multiplicator : null}
                allowCropping = ${props.allowCropping}
                allowUpScaling = ${props.allowUpScaling}
                async = ${props.async}
            }
        }
    }
}
