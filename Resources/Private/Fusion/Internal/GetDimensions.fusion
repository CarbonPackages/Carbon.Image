prototype(Carbon.Image:Internal.GetDimensions) < prototype(Neos.Fusion:Component) {
    asset = null

    async = null
    maximumWidth = null
    maximumHeight = null
    width = null
    height = null
    allowCropping = null
    allowUpScaling = null
    preset = null

    renderer = Neos.Fusion:Component {
        @apply.props = ${props}
        values = afx` 
            <Carbon.Image:Internal.GetValues {...props} />
        `
        // We need the raw thumbnail for the feed to access the file size of the processed image and other details
        assetObject = ${props.asset && !this.values.async ? Carbon.Image.Asset.createThumbnail(props.asset, this.values.width, this.values.maximumWidth, this.values.height, this.values.maximumHeight, this.values.allowCropping, this.values.allowUpScaling, false) : null}

        renderer = Neos.Fusion:Case {
            hasAssetObject {
                condition = ${props.assetObject && props.assetObject.width && props.assetObject.height}
                renderer = Neos.Fusion:DataStructure {
                    asset = ${props.asset}
                    width = ${props.assetObject.width}
                    height = ${props.assetObject.height}
                    filesize = ${String.toInteger(props.assetObject.resource.fileSize)}
                    ratio = ${this.width / this.height}
                    allowCropping = ${props.values.allowCropping}
                    allowUpScaling = ${props.values.allowUpScaling}
                    async = false
                    combined = ${this.width + 'x' + this.height}
                }
            }
            hasAsset {
                condition = ${props.asset}
                renderer = Neos.Fusion:Component {
                    // We try to get the values anyway

                    asset = ${props.asset}
                    values = ${props.values}

                    ratio = ${props.values.height && props.values.width && props.values.allowCropping ? props.values.width / props.values.height : props.asset.width / props.asset.height}

                    maxW = ${props.values.maximumWidth && props.values.width ? (props.values.maximumWidth < props.values.width ? props.values.maximumWidth : props.values.width) : props.values.maximumWidth || props.values.width}
                    maxH = ${props.values.maximumHeight && props.values.height ? (props.values.maximumHeight < props.values.height ? props.values.maximumHeight : props.values.height) : props.values.maximumHeight || props.values.height}

                    assetW = ${this.maxW && props.asset.width > this.maxW ? this.maxW : props.asset.width}
                    assetH = ${this.maxH && props.asset.height > this.maxH ? this.maxH : props.asset.height}

                    calcH = ${this.assetW / this.ratio}

                    width = ${this.calcH > this.assetH ? this.assetH * this.ratio : this.assetW}
                    height = ${this.calcH > this.assetH ? this.assetH : this.calcH}

                    renderer = Neos.Fusion:DataStructure {
                        asset = ${props.asset}
                        width = ${Math.round(props.width)}
                        height = ${Math.round(props.height)}
                        ratio = ${props.ratio}
                        allowCropping = ${props.values.allowCropping}
                        allowUpScaling = ${props.values.allowUpScaling}
                        async = ${props.values.async}
                        combined = ${this.width + 'x' + this.height}
                    }
                }
            }
            default {
                condition = true
                renderer = false
            }
        }
    }
}
