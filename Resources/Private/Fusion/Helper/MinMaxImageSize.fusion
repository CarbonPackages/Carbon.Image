prototype(Carbon.Image:Helper.MinMaxImageSize) < prototype(Neos.Fusion:Component) {
    @propTypes {
        min = ${PropTypes.integer}
        max = ${PropTypes.integer}
        size = ${PropTypes.integer}
        step = ${PropTypes.integer}
        multiplicator = ${PropTypes.arrayOf(PropTypes.integer)}
    }

    size = ${value}

    min = 300
    max = 3900

    // If you set this to null, the steps generation gets deactivated
    step = 150
    multiplicator = ${[2, 1.5, 1, 0.75, 0.5, 0.25]}


    min.@process.setMin = ${this.size ? Math.min(value, this.size) : value}
    max.@process.setMax = ${this.size ? Math.max(value, this.size) : value}
    @if.set = ${this.step || (this.size && this.multiplicator)}
    
    renderer = Neos.Fusion:Value {
        multiplicators = Neos.Fusion:Map {
            items = ${props.multiplicator}
            itemRenderer = ${Math.round(props.size * item)}
        }
        steps = Neos.Fusion:Reduce {
            @if.set = ${props.step}
            initialValue = ${[props.min, props.max]}
            items = ${Array.range(1, Math.round(props.max / props.step))}
            itemReducer = ${Array.push(carry, item * props.step)}
        }

        concat = ${Carbon.Array.unique(Array.sort(Array.concat(this.multiplicators, this.steps)))}
        minmax = ${Array.filter(this.concat, item => (item >= props.min && item <= props.max))}
        value = ${Array.join(this.minmax, 'w,') + 'w'}
    }
}
