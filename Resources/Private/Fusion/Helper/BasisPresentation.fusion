prototype(Carbon.Image:Helper.BasisPresentation) < prototype(Neos.Fusion:Component) {
    @propTypes {
        lazy = ${PropTypes.boolean}
        lazyClass = ${PropTypes.string}
        lazyWidth = ${PropTypes.float}
        objectFit = ${PropTypes.oneOf(['cover', 'contain'])}
        loading = ${PropTypes.oneOf(['auto', 'lazy', 'eager'])}
        thumbnailPreset = ${PropTypes.string}
        variantPreset = ${PropTypes.arrayOf(PropTypes.string)}
        width = ${PropTypes.float}
        height = ${PropTypes.float}
        quality = ${PropTypes.float}
        additionalFormats = ${PropTypes.arrayOf(PropTypes.string)}
    }

    lazy = ${Configuration.Setting('Carbon.Image.lazy.enabled')}
    lazy.@process.disableInBackend = ${node.context.inBackend ? false : value}
    lazyClass = ${Configuration.Setting('Carbon.Image.lazy.class')}
    lazyWidth = ${Configuration.Setting('Carbon.Image.lazy.lazyWidth')}

    quality = ${Configuration.Setting('Carbon.Image.quality')}

    imageSource = ${null}
    thumbnailPreset = ${null}
    variantPreset = ${null}
    variantPreset.@process.split = ${value && Type.isString(value) ? String.split(value, '::') : (value || null)}
    width = ${null}
    height = ${null}

    defaultFormat = ${Configuration.Setting('Carbon.Image.imageFormat.default')}
    additionalFormats = ${Configuration.Setting('Carbon.Image.imageFormat.additional')}

    srcset = ${null}
    sizes = ${null}
    sources = ${null}
    alternativeText = ${null}
    title = ${null}
    objectFit = ${null}
    id = ${null}
    class = ${null}
    style = ${null}
    loading = ${null}

    figureTagName = 'figure'
    figureAttributes = Neos.Fusion:DataStructure
    // If set and figureTagName is 'figure', a figcaption is rendered
    content = ${null}

    pictureAttributes = Neos.Fusion:DataStructure

    minMaxImageSize = Neos.Fusion:DataStructure {
        min = ${Configuration.setting('Carbon.Image.minMaxImageSize.min')}
        max = ${Configuration.setting('Carbon.Image.minMaxImageSize.max')}
        step = ${Configuration.setting('Carbon.Image.minMaxImageSize.step')}
        multiplicator = ${Configuration.setting('Carbon.Image.minMaxImageSize.multiplicator')}
    }

    // Internal
    width.@process {
        thumbnailPreset = ${this.thumbnailPreset ? Configuration.setting('Neos.Media.thumbnailPresets.' + this.thumbnailPreset + '.width') : (String.toInteger(value) || null)}
    }
    height.@process {
        thumbnailPreset = ${this.thumbnailPreset ? Configuration.setting('Neos.Media.thumbnailPresets.' + this.thumbnailPreset + '.height') : (String.toInteger(value) || null)}
    }
    @private {
        isAssetImageSource = ${Type.instance(props.imageSource, 'Sitegeist\\Kaleidoscope\\Domain\\AssetImageSource')}
        isScalableImageSource = ${private.isAssetImageSource || Type.instance(props.imageSource, 'Sitegeist\\Kaleidoscope\\Domain\\DummyImageSource')}
        sizedImageSource = ${props.imageSource}
        sizedImageSource.@process {
            width = ${private.isScalableImageSource && props.width ? value.withWidth(props.width) : value}
            height = ${private.isScalableImageSource && props.height ? value.withHeight(props.height) : value}
            quality = ${private.isScalableImageSource && props.quality ? value.withQuality(props.quality) : value}
            variantPreset = ${private.isScalableImageSource && props.variantPreset ? value.withVariantPreset(props.variantPreset[0], props.variantPreset[1]) : value}
        }
        imageClass = ${BEM.modifier('carbon-image', [props.objectFit, 'picture'])}
        finalSrcSet = Neos.Fusion:Case {
            noSourceSet {
                condition = ${props.srcset == 'none' || props.srcset == '1x'}
                renderer = false
            }
            hasCustomScrset {
                condition = ${props.srcset}
                renderer = ${props.srcset}
            }
            automaticSrcset {
                condition = true
                renderer = Carbon.Image:Helper.MinMaxImageSize {
                    @apply.minMaxImageSize = ${props.minMaxImageSize}
                    size = ${props.width}
                }
            }
        }
    }

    @if.hasImageSource = ${this.imageSource}
}
