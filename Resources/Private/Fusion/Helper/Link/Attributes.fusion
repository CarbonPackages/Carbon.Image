prototype(Carbon.Image:Helper.Link.Attributes) < prototype(Neos.Fusion:Component) {
    link = ${null}
    linkAdditonalAttributes = ${null}
    linkOptions = ${null}

    lightbox = ${null}
    lightboxImage = ${null}
    lightboxConfiguration = ${Configuration.setting('Carbon.Image.lightbox')}

    renderer = Neos.Fusion:Case {
        hasLinkedNode {
            condition = ${props.link && Type.instance(props.link, 'Neos\ContentRepository\Domain\Model\Node')}
            renderer = Neos.Fusion:DataStructure {
                @apply.props = ${props.linkAdditonalAttributes}
                href = afx`<Neos.Neos:NodeUri {...props.linkOptions} node={props.link} />`
            }
        }
        hasLinkAsStringOrInLinkAdditonalAttributes {
            condition = ${(props.link && Type.isString(props.link)) || Type.isString(props.linkAdditonalAttributes.href)}
            renderer = afx`<Neos.Fusion:DataStructure href={props.link} {...props.linkAdditonalAttributes} />`
        }
        hasLightbox {
            condition = ${props.lightbox && props.lightboxImage}
            renderer = Neos.Fusion:Component {
                config = ${props.lightboxConfiguration}
                imageSource = Carbon.Image:Helper.ImageSource {
                    image = ${props.lightboxImage}
                    thumbnailPreset = ${props.lightboxConfiguration.thumbnailPreset || null}
                    variantPreset = ${props.lightboxConfiguration.variantPreset || null}
                    width = ${props.lightboxConfiguration.width || null}
                    height = ${props.lightboxConfiguration.height || null}
                    imageFormat = ${props.lightboxConfiguration.imageFormat || null}
                }

                srcset = Carbon.Image:Helper.MinMaxImageSize {
                    @if.set = ${props.lightboxConfiguration.maxSrcSetWidth}
                    asset = ${props.lightboxImage}
                    max = ${props.lightboxConfiguration.maxSrcSetWidth}
                }
                lastSrcSetWidth = ${this.srcset ? String.toInteger(Array.last(String.split(this.srcset, ','))) : null}
                imageSourceForSize = ${this.lastSrcSetWidth ? this.imageSource.withWidth(this.lastSrcSetWidth) : this.imageSource}

                renderer = Neos.Fusion:DataStructure {
                    href = ${node.context.inBackend ? null :  props.imageSource.src()}
                    class = ${props.config.class}
                    rel = ${props.config.rel}
                    target = ${props.config.target}
                    data-pswp-srcset = ${props.srcset ? props.imageSource.srcset(props.srcset) : null}
                    data-pswp-width = ${props.imageSourceForSize.width()}
                    data-pswp-height = ${props.imageSourceForSize.height()}
                    data-cropped = 'true'
                }
            }
        }
        default {
            condition = true
            renderer = false
        }
    }
}
