prototype(Carbon.Image:Responsive.Tag) < prototype(Carbon.Image:Tag) {
    // Use with https://www.npmjs.com/package/lazysizes

    responsive = ${node.context.live}
    loader = ${Configuration.setting('Carbon.Image.responsive.tag.loader')}
    sizes = ${Configuration.setting('Carbon.Image.responsive.sizesPresets')}
    placeholderWidth = ${Configuration.setting('Carbon.Image.responsive.placeholderWidth')}
    maximumScreenDensity = ${Configuration.setting('Carbon.Image.responsive.maximumScreenDensity')}
    ratio = null

    outputDimensions = false
    srcset.@process.responsive = ${this.responsive ? false : value}

    renderer {
        dimensions.@if.render = ${props.responsive}
        renderer {
            @process.loader = Neos.Fusion:Value {
                @position = 'start 1'
                value = ${value + props.loader}
            }
            attributes {
                width = null
                height = null
                class.@process.addLazyClass = Carbon.Image:Internal.AddLazyLoadClass
                src.@process.replaceWithPlaceholder = Carbon.Image:ImageUri {
                    @if.render = ${props.responsive && props.asset && props.placeholderWidth}
                    asset = ${props.asset}
                    width = ${props.placeholderWidth}
                    height = ${props.dimensions.ratio ? this.width / props.dimensions.ratio : null}
                    async = ${props.dimensions.async}
                    allowCropping = ${props.dimensions.allowCropping}
                    allowUpScaling = ${props.dimensions.allowUpScaling}
                }
                data-sizes = ${props.responsive && props.asset ? 'auto' : false}
                data-srcset = Carbon.Image:Responsive.Srcset {
                    asset = ${props.asset}
                    sizes = ${Carbon.Array.unique(Array.push(props.sizes, this.maximumWidth))}
                    ratio = ${props.ratio || props.dimensions.ratio}
                    async = ${props.dimensions.async}
                    maximumWidth = ${props.dimensions.width * props.maximumScreenDensity}
                    maximumHeight = ${props.dimensions.height * props.maximumScreenDensity}
                    allowCropping = ${props.dimensions.allowCropping}
                    allowUpScaling = ${props.dimensions.allowUpScaling}
                }
            }
        }
    }
}
