prototype(Carbon.Image:Responsive.Background) < prototype(Carbon.Image:Background) {
    // Use with https://www.npmjs.com/package/lazysizes

    responsive = ${node.context.live}
    loader = ${Configuration.setting('Carbon.Image.responsive.loader')}
    sizes = ${Configuration.setting('Carbon.Image.responsive.sizesPresets')}
    placeholderWidth = ${Configuration.setting('Carbon.Image.responsive.placeholderWidth')}
    maximumScreenDensity = ${Configuration.setting('Carbon.Image.responsive.maximumScreenDensity')}

    renderer {
        style.@if.render = ${!props.responsive || !props.asset}

        bgset = Carbon.Image:Responsive.Srcset {
            @if.render = ${props.responsive}
            dimensions = afx`
                <Carbon.Image:Internal.GetDimensions {...props} />
            `
            asset = ${props.asset}
            sizes = ${Carbon.Array.unique(Array.push(props.sizes, this.maximumWidth))}
            ratio = ${this.dimensions.ratio}
            async = ${this.dimensions.async}
            maximumWidth = ${this.dimensions.width * props.maximumScreenDensity}
            maximumHeight = ${this.dimensions.height * props.maximumScreenDensity}
            allowCropping = ${this.dimensions.allowCropping}
            allowUpScaling = ${this.dimensions.allowUpScaling}
        }

        renderer {
            content.@process.loader = ${value + props.loader}
            attributes {
                hasLink.renderer {
                    data-sizes = ${props.responsive && props.asset ? 'auto' : false}
                    data-bgset = ${props.bgset}
                }
                hasLightbox.renderer {
                    data-sizes = ${props.responsive && props.asset ? 'auto' : false}
                    data-bgset = ${props.bgset}
                }
                default.renderer {
                    data-sizes = ${props.responsive && props.asset ? 'auto' : false}
                    data-bgset = ${props.bgset}
                }
            }
        }
    }
}
