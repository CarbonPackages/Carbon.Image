prototype(Carbon.Image:Background) < prototype(Neos.Fusion:Tag) {
  asset = false

  @if.hasImageOrBackend = ${node.context.inBackend || this.asset ? true : false}

  lightboxAsset = ${this.asset}
  link = false
  lightbox = false
  caption = false
  defaultTagName = 'div'
  additionalClass = null
  additionalClass.@process {
    convertToString = ${Type.isArray(value) ? Array.join(value, ' ') : String.toString(value)}
    hasAsset = ${value + (this.asset ? '' : ' neos-handle')}
    trimString = ${String.trim(value)}
  }
  preset = false
  maximumWidth = ${Configuration.setting('Carbon.Image.maximumWidth')}
  maximumHeight = ${Configuration.setting('Carbon.Image.maximumHeight')}
  width = ${Configuration.setting('Carbon.Image.width')}
  height = ${Configuration.setting('Carbon.Image.height')}
  allowCropping = ${Configuration.setting('Carbon.Image.allowCropping')}
  allowUpScaling = ${Configuration.setting('Carbon.Image.allowUpScaling')}

  srcset = ${Configuration.setting('Carbon.Image.srcset')}
  dummyImageBackground = ${Configuration.setting('Carbon.Image.dummyImageBackground')}

  @context {
    asset = ${this.asset}
    lightboxAsset = ${this.lightboxAsset}
    preset = ${this.preset}
    link = ${this.link}
    lightbox = ${this.lightbox}
    caption = ${this.caption}
    maximumWidth = ${this.maximumWidth}
    maximumHeight = ${this.maximumHeight}
    width = ${this.width}
    height = ${this.height}
    allowCropping = ${this.allowCropping}
    allowUpScaling = ${this.allowUpScaling}
    srcset = ${this.srcset}
    additionalClass = ${this.additionalClass}
    dummyImageBackground = ${this.dummyImageBackground}
  }

  hasValidLink = Carbon.Link:Valid

  tagName = ${node.context.live && (this.hasValidLink || this.lightbox) ? 'a' : this.defaultTagName}

  attributes = Carbon.Image:Background.Attributes
}

prototype(Carbon.Image:Background.Attributes) < prototype(Neos.Fusion:Case) {
  @context.style = Neos.Fusion:RawArray {
    src = Neos.Fusion:Case {
      hasImage {
        condition = ${asset ? true : false}
        renderer = Carbon.Image:ImageUri
      }
      inBackend {
        condition = true
        renderer = Neos.Fusion:ResourceUri {
          path = 'resource://Carbon.Image/Public/dummy-image.svg'
        }
      }
      @process.addCSS = ${'background-image:url(' + value + ');'}
    }
    srcset = Carbon.Image:Srcset {
      prototype(Carbon.Image:ImageUri) {
        @process.addResolution = ${this.addResolution ? (this.multiplicator > 1 ? ',' : '') + 'url(' + value + ') ' + this.multiplicator + 'x' : value}
      }
      @process.addCSS = ${'background-image:-webkit-image-set(' + value + ');'}
    }
    backgroundColor = ${!asset && dummyImageBackground ? 'background-color:' + dummyImageBackground + ';' : false}
    backgroundSize = ${!asset ? 'background-size:contain;' : false}

    @process {
      convertToString = ${Type.isArray(value) ? Array.join(value, ' ') : String.toString(value)}
      trimString = ${String.trim(value)}
    }
  }

  hasLink {
    condition = Carbon.Link:Valid
    renderer = Carbon.Link:Attributes {
      style = ${style}
    }
  }
  hasLightbox {
    condition = ${lightbox && node.context.live}
    renderer = Carbon.Image:Lightbox.Attributes {
      style = ${style}
    }
  }
  default {
    condition = true
    renderer = Neos.Fusion:Attributes {
      class = ${additionalClass}
      style = ${style}
    }
  }
}
